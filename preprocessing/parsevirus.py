#!/usr/bin/env python

import json
import logging
import os
import sys
import time
import datetime
#import Levenshtein
import numpy
import copy

def get_json(filepath, log):
    """
    Reads a JSON file, returns None on ValueError
    and if not a file.
    """
    parsed_json = None

    # See if it is a file and not a directory or something else
    if not os.path.isfile(file_path):
        log.warning("%s is not a file! Skipping", file_path)
        return parsed_json

    try:
        with open(filepath, "rb") as fp:
            parsed_json = json.loads(fp.read())

    except ValueError as e:
        log.error("Error reading JSON file %s. Error: %s",
                  filepath, e)

    return parsed_json


def setup_logger():
    """"
    Sets up the logger. 
    """
    logformat = "[%(asctime)s %(levelname)s] %(message)s"
    dateformat = "%d-%m-%y %H:%M:%S"
    logger = logging.getLogger("extraction")
    formatter = logging.Formatter(logformat)
    formatter.datefmt = dateformat
    fh = logging.FileHandler("dataextraction.log", mode="a")
    fh.setFormatter(formatter)
    sh = logging.StreamHandler()
    sh.setFormatter(formatter)
    logger.setLevel(logging.INFO)
    logger.addHandler(fh)
    logger.addHandler(sh)
    logger.propagate = False


if __name__ == "__main__":

    setup_logger()
    output_file=open('test.json', 'w')
    log = logging.getLogger("extraction")

    DATASET_DIR = "/home/arjun/Downloads/file_virusshare/reports"

    ignore_list = []


    for sample in os.listdir(DATASET_DIR):

        file_path = os.path.join(DATASET_DIR, sample)
        statinfo=os.stat(file_path)
        
        log.info("Reading file: %s", file_path)
        parsed_json = get_json(file_path, log)

        if statinfo.st_size/1000000>100:  # file size must be less than 50 MB
          log.warning("File size greater than 50MB. Skipping %s", file_path)
          ignore_list.append(file_path)
          continue

        if "scans" not in parsed_json["virustotal"]:
            print('Scans does not exist')
            ignore_list.append(file_path)
            continue

        my_dict = {}
        list1=[]
        my_dict["sha1"] = parsed_json["target"]["file"]["sha1"]

        for proc in parsed_json["virustotal"]["scans"]:
            if parsed_json["virustotal"]["scans"][proc]["detected"]==True:
                list1.append([proc,parsed_json["virustotal"]["scans"][proc]["result"]])
        my_dict["av_labels"] = list1
        my_dict["scan_date"] = parsed_json["virustotal"]["scan_date"]
        my_dict["sha256"] = parsed_json["target"]["file"]["sha256"]
        my_dict["md5"] = sample.split(".")[0].split("-")[1] #parsed_json["target"]["file"]["md5"]
        print my_dict
        back_json=json.dumps(my_dict, output_file)
        output_file.write(back_json)
        output_file.write("\n")
    output_file.close()